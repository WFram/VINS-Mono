%YAML:1.0

#common parameters
imu_topic: "/imu"
image_topic: "/camera/image_raw"
output_path: "/home/wfram/vins_mono_ws/src/output/"

#camera calibration 
model_type: PINHOLE
camera_name: camera
image_width: 848
image_height: 480
distortion_parameters:  # TODO: Since the focal len has been changed, let's calibrate again
   k1: -0.48926225
   k2: 0.24427961
   p1: 0.00315019
   p2: 0.00157773
projection_parameters:
   fx: 872.7057452735113
   fy: 870.4691806271561
   cx: 409.09626491970903
   cy: 249.45576412551657

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
# If you choose 0 or 1, you should write down the following matrix.
# Rotation from camera frame to imu frame, imu^R_cam
# Refined by VINS-Mono
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [1.3541311096539888e-02, 0.999908302752944, 0.000137766160856,
          0.999902134214296, -0.013540742971475, -0.003517139957148,
          -0.003514951988922, 0.000185379364592, -9.9999380535431692e-01]
# Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [2.6870690119900075e-02, 0.020740935736938, -4.3251750752052849e-02]

# From kalibr
#extrinsicRotation: !!opencv-matrix
#   rows: 3
#   cols: 3
#   dt: d
#   data: [0.00727032, 0.9999053, 0.01168457,
#          0.99997283, -0.00725559, -0.00130275,
#          -0.00121785, 0.01169372, -0.99993088]
##Translation from camera frame to imu frame, imu^T_cam
#extrinsicTranslation: !!opencv-matrix
#   rows: 3
#   cols: 1
#   dt: d
#   data: [-0.00029709, -0.00823162, -0.07548993]

#feature tracker parameters
max_cnt: 150            # max feature number in feature tracking TODO: 100 for first time (Jetson)
min_dist: 30            # min distance between two features 
freq: 20                # frequency (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequency will be same as raw image
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 0             # if image is too dark or light, turn on equalize to find enough features
fisheye: 0              # if using fisheye, turn on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.04  # max solver iteration time (ms), to guarantee real time
max_num_iterations: 8   # max solver iterations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.04334389206191802          # accelerometer measurement noise standard deviation. #0.2 0.003064876
gyr_n: 0.0019792625912192652         # gyroscope measurement noise standard deviation.     #0.05 0.000139955
acc_w: 6.226271873858886e-04         # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 1.0866894432315462e-05       # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.81007     # gravity magnitude TODO

#loop closure parameters
loop_closure: 1                    # start loop closure TODO: Turn off for first time (Jetson)
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
fast_relocalization: 0             # useful in real-time and large project
pose_graph_save_path: "/home/wfram/vins_mono_ws/src/output/pose_graph/" # save and load path

#unsynchronization parameters
estimate_td: 1                      # online estimate time offset between camera and imu
td: 0.03356973236020965                             # initial value of time offset. unit: s. read image clock + td = real image clock (IMU clock) TODO

#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 1                   # save image in pose graph for visualization purpose; you can close this function by setting 0
visualize_imu_forward: 1        # output imu forward propagation to achieve low latency and high frequency results
visualize_camera_size: 0.4      # size of camera marker in RViz
